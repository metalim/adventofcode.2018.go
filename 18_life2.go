package main

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	. "github.com/logrusorgru/aurora"
)

func _log(a ...interface{}) {
	fmt.Println(a...)
}

func _log1(a ...interface{}) {
	fmt.Println(a...)
	fmt.Scanln()
}

func sliceAtoi(in []string) []int {
	out := make([]int, len(in))
	for i, v := range in {
		out[i], _ = strconv.Atoi(v)
	}
	return out
}

func abs(n int) int {
	if n < 0 {
		return -n
	}
	return n
}

//
// Solution
//

type cell = byte
type row []cell
type def []row

func parse(in string) def {
	ss := strings.Split(in, "\n")
	dim := len(ss) + 2
	def := make(def, 0, dim)
	def = append(def, make(row, dim))
	for _, s := range ss {
		def = append(def, row("\x00"+s+"\x00"))
	}
	def = append(def, make(row, dim))
	return def
}

var ns = [8][2]int{{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}}

func (f *def) neighs(x, y int, c cell) (out int) {
	for _, n := range ns {
		if (*f)[y+n[0]][x+n[1]] == c {
			out++
		}
	}
	return
}

const (
	open = cell('.')
	tree = cell('|')
	lumb = cell('#')
)

var next def // we swap with this, to skip new allocations

func (f *def) step() {
	dim := len(*f)
	if len(next) < dim {
		next = make(def, 0, len(*f))
		for i := 0; i < dim; i++ {
			next = append(next, make(row, dim))
		}
	}

	for y := 1; y < dim-1; y++ {
		for x := 1; x < dim-1; x++ {
			v := (*f)[y][x]
			next[y][x] = v
			switch v {
			case open:
				if f.neighs(x, y, tree) >= 3 {
					next[y][x] = tree
				}
			case tree:
				if f.neighs(x, y, lumb) >= 3 {
					next[y][x] = lumb
				}
			case lumb:
				if f.neighs(x, y, lumb) < 1 || f.neighs(x, y, tree) < 1 {
					next[y][x] = open
				}
			}
		}
	}
	*f, next = next, *f
}

func (f *def) _print() {
	for _, r := range *f {
		_log(string(r))
	}
}

func (f *def) score() int {
	var ts, ls int
	dim := len(*f)
	for y := 1; y < dim-1; y++ {
		for x := 1; x < dim-1; x++ {
			switch (*f)[y][x] {
			case tree:
				ts++
			case lumb:
				ls++
			}
		}
	}
	return ts * ls
}

func part1(f def) int {
	for i := 0; i < 10; i++ {
		f.step()
	}
	return f.score()
}

const thr = 1000

func part2(f def) int {
	scores := []int{}
	n := int(1e9) - 10 // we continue from part1
	for i := 0; i < n; i++ {
		f.step()
		sc := f.score()
		scores = append(scores, sc)
		if i > thr+1 {
			if sc == scores[thr] {
				period := i - thr
				valid := true
				// double check
				for j := 1; j < 10; j++ {
					if scores[i-j] != scores[i-j-period] {
						valid = false
						break
					}
				}
				if valid {
					_log("found period", Cyan(period))
					return scores[thr+(n-thr)%period-1]
				}
			}
		}
	}
	return f.score()
}

//
// tests
//

func verify(v, ex int) {
	if v != ex {
		log.Fatal(v, "!=", ex)
	}
}

func test() {
	def := parse(`.#.#...|#.
.....#|##|
.|..|...#.
..|#.....#
#.#|||#|#|
...#.||...
.|....|...
||...#|.#|
|.||||..|.
...#.|..|.`)

	verify(part1(def), 1147)
	fmt.Println("tests passed")
}

func main() {
	test()
	for i, in := range ins {
		fmt.Println(Brown(fmt.Sprint("=== for ", i, " ===")))
		var t0, t1 time.Time

		t0 = time.Now()
		def := parse(in)
		t1 = time.Now()
		fmt.Println(Gray("parse:"), Black(t1.Sub(t0)).Bold())

		t0 = time.Now()
		v1 := part1(def)
		t1 = time.Now()
		fmt.Println(Gray("part 1:"), Black(t1.Sub(t0)).Bold(), Green(v1).Bold())

		t0 = time.Now()
		v2 := part2(def)
		t1 = time.Now()
		fmt.Println(Gray("part 2:"), Black(t1.Sub(t0)).Bold(), Green(v2).Bold())

		fmt.Println()
	}
}

var ins = map[string]string{
	"github": `........#.##..#|#|.#.....|......#..#.|..##..||.#..
#|##.|||.|..|||......|.##.#|#|....||#.#...#...#..#
..##...#|#..|#.|..#||#...|#....|#...#|#.|.||...|..
.....#|||.|.#...###|....|#..#.#.#.|..#||#|....|#.|
....|.....#.||.#..#...#|....|||..#....##...|..|.#|
||...|###..|..|||..|#.##|.####.#...|.||.|....|.##.
..#.#.###..||......#|#|.|....#|.#|.|...#....#...#|
.|..||||||...#.##..|.#||.#|##|..#.#..##..#...|#...
.|.....||...#.#|.##|..|.##||..#.#..|..#.#.#..|.#|.
||...|#........#.|..##|.|..#...#...#|#|..||.|....#
#||.|.|..|.......##....|..#||#.#|.|||......|..||..
.....#.|||.....|.#.#.......#.|..#.|.....|.|.#...#.
...#.##.#.||#.#|.#.##..#.||#.#.#|#.||.||.|......#.
|.|...#|.|####|.|..#.#|....|......|....|...||#||..
.#...#.#......|...#.....|.....|.#|...##|||...#.|#.
||##.#...#.|...##..##.||#...#|...|##.##...#||..#|.
|.|#.||..|##.|.#.|..#..|.##.#.......#...|....||...
.|.......#..##...|.|..|#.#....|#|..##|#|.##|.|.|#.
.|....|.#|||#.#..#..|||.....||...#|.#..|..#.#...#.
...#..###.#|.##||.#.|.||###..|..|#.|#..||......||.
..##.......##|.....#...|#|..##|.#.|||.|#....|##...
#...#|##|......##|...|#..#.|..##..#..#.|##.##|#..#
|.#|.....|..#...|....|...#....#|..#.....||...|#|.|
##...#.....#.....|#|.......|....####.#..##.|.##...
.....|...|#|#..|#|.|..##.|..|....##..||.#...|..|.|
.|..|....##.||||.##|.#...|..|#|.#.|####.|..|##.#..
#.........|##.#|..##|...|........|..|....|..#...##
.#.|...#...#...|.|...|..|.#.|....#..|.|..|..#|....
.....#.....#|.#....|....##...##....###....#.|...|.
||.....|.|.##|.##||.#|#.##|.#..|#####|...|...||#.#
...#||....#.....##.|##|.##|#.##.#|.|.....#........
..##.....||..#..#.|..##...#.|.|.|.|...|.#.|..|....
|##..|..........##..#|...|......||.#....#....|..#.
...#..|.#.|...|.##|.##..##..|.|....#||#|##..||||..
#...##......|..|#...#.#.|#||..#...|.#...|..###.||.
|#.......|#.|##|....|.....#..||.|#|#...#|....|..#|
.|.....#|##.|.#...#..#||#.....|....#||.#|.##.##.#|
|#..###..#..|#.....##...||.|.|.#.#|.||..||.||#|#..
||||#....|#..|.|...|...||....|...#....#.##...#|...
...||##||#......|#.#..#..|.....|...#..#|...#...|||
.|#.|.|....|...#.....|#....|..#.#...#...||..##|..|
||#.|##.|...|.##......##|#..#..#.#.#.....|#|##.##.
|.#.....||.....#.#...|...|..|#|..|..#...|....|...|
###..#.#......#|..#....#......|##.##....|||.|..#|.
..#.|.#...#..|#####|.....##.|.|#......|..||.#|....
.#||.|.##..#.|..##......|..|.|#..|.....#.....|#|..
|##.#......#.#.#.#|||#|....#...#.|.........|||.#..
|......||.|..#.|#||...||.#.#.##..#..#.#....#.#..#|
#.|..##.....#..|...|#...#...|.......|.|..|#|......
##...#....#..#..#....|...#|#.||.|...|.#..###|##|.|`,
	"google": `#.##.....||||#|.....|..#.|.||..||.#|....##..#|..|.
|#....||..|..#.#..|.....##.|..|..#.....#|..|..|#..
.#.....#.........#..|.....|.#.#|#||....|...||#..##
....#|...#...#||..#.#..|||#|.||.......#|..#|#..#.#
....|..|......|....|..#.................#..||||.#|
.....||..|##...#.||.....||......##....|...|.|.##..
#.|||#.|##.|...#|.|..|###....||.#.#....#.|.##...||
.||.|.|..#|....|.#.|.....##..##..#.#.||..#.#.|.|..
#..|#...|.#.##..##||.|#...||....#...#..|...##.....
..........|||.........||#.....#...#.#.....|.....||
...#|#.##.#.|#.....||..|#..|.#...|.......##....|#.
..||.|..##..#.#.##|....|..#|..##|..|...#.#....#.|.
..#...|.##||.|.#|....#|#...#..|......#..|...#..#..
.#|.#.....|.....||..|...||...|.#...#...#....|....|
|........##....|.#.|.#.||||#||.#..#.|..||||..|..#.
.##.|.|#||#||....|.#..#.#|.|...|.|...||....#..|.#.
|..||#.||.#.||.#...||#.||...|#|||..###|...##|...|.
...#.|##.....|.#..|....|.##.#..||..|....#.#.|#|...
.|#..||.|..#.|.|......#...#.|#.|...|.||.#....#||..
.##......##....|..#|...#.#.#.#......#||...#|..##..
#..#..#.#.|#.#|#..|#|#|..##..|.|.|.#.#.|...|#...#.
..#.##|.|........|##.#...|###..|..|.....|...|.#|#.
#.#....|.|#..#.||..##......#.......|#|...|.#.#||||
...|#.............|.......#.#.|#..#..||.#||.#.|#.#
#.|..|.#..|..#|.....|.#.....#..|#.#......|#.|.....
......#|........#||..||...|#.###|.....#.|..#|.|...
..#....#...#...#.|.||###...#.|..|||.....|...|.|...
..#.|..|.#.##|......#..#|.#.|.####.||.|..|.|.##||.
........##....#....###....#|...|..|...#||#|#.##.##
....#|||##.#.##.|.##..|#.|..#.|....#..#||##|.#...#
#..........|....|.....||.....#..|#...##.||.....||.
..#........#....#....#.|#.|.|.....##.|#...#.||||#|
..#.....|###.#...#.|.||...|...|||......#.|...|....
|..|#|..#....#..|....#..||.||.||.......#..#..|..#.
.##.#..#....|#..#......#...#.|..|....|......##.#..
.....||#.........|.....|.|||..|.|....|#..|....|..#
..|..|||#..#|.#.|#...#|.#..###..#|#|.|##...##||..#
.....#...###.....#..#|#...##|.#|#|##||.#...#.|....
##.#......|#......#..|#.|#.#...#.#.|....###|.||...
.#....#.....##.#.....|..#|........#.##|...#.#.#...
|##|#|....|..#.#||#.....#|#.....#.|.|#|.|.|.#|...#
||#|#..||........#.#.......##..#...||.||...#|.....
|.|.##|.....#.....|....###....|..|##.##|.#..|##.|#
#|.|.||.......|..#.#.#|...|....|##.#.##.|.#.||#...
.||..|#..#|.#|.|##..|#|#....#..#.#...#.#.......#.|
#|...|..#|.|#|.......|#.##|.##.............#.#..|.
...|...|.#.....|#..#.|...#|.#..#.....##|.....#.|..
##|.#.....#...##|.##|....#.##|#.||...#..|.#.#.||#.
.|###|.........|...#.#..|||.....##|...|#.||||..#..
..#.|..|##.||.#||..#..|.|....|||.#....|#.....|....`,
}
